# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

####################################
# Core EditorConfig Options
####################################

# ====================
# Default settings
# ====================
[*]
#--------------------#
# 改行設定
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true

# インデントと間隔
indent_style = space

# ====================
# .NET
# ====================
[*.{cs,csx,vb,vbx}]
#--------------------#
# エンコーディング
charset = utf-8-bom

# 改行設定
end_of_line = lf

# インデントと間隔
indent_size = 4
tab_width = 4

# ====================
# Razor
# ====================
[*.{razor,cshtml,vbhtml}]
#--------------------#
# エンコーディング
charset = utf-8-bom

# 改行設定
end_of_line = lf

# インデントと間隔
indent_size = 4
tab_width = 4

# ====================
# Python
# ====================
[*.{py}]
#--------------------#
# エンコーディング
charset = utf-8

# 改行設定
end_of_line = lf

# インデントと間隔
indent_size = 4
tab_width = 4

# 1行当たりの文字数
max_line_length = 88

# ====================
# HTML
# ====================
[*.html]
#--------------------#
# エンコーディング
charset = utf-8

# 改行設定
end_of_line = lf

# インデントと間隔
indent_size = 4
tab_width = 4

# ====================
# CSS
# ====================
[*.{css,scss,less}]
#--------------------#
# エンコーディング
charset = utf-8

# 改行設定
end_of_line = lf

# インデントと間隔
indent_size = 4
tab_width = 4

# ====================
# JavaScript
# ====================
[*.{js,jsx}]
#--------------------#
# エンコーディング
charset = utf-8

# 改行設定
end_of_line = lf

# インデントと間隔
indent_size = 4
tab_width = 4

# コメント
block_comment_start = /**
block_comment = *
block_comment_end = */

# ====================
# TypeScript
# ====================
[*.ts]
#--------------------#
# エンコーディング
charset = utf-8

# 改行設定
end_of_line = crlf

# インデントと間隔
indent_size = 4
tab_width = 4

# コメント
block_comment_start = /**
block_comment = *
block_comment_end = */

# ====================
# Minified CSS/JS
# ====================
[**.min.{js,css}]
#--------------------#
# We don't want to apply our defaults to third-party code or minified bundles:
indent_style = ignore
indent_size = ignore
insert_final_newline = false

# ====================
# XML
# ====================
# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj,builds,config}]
charset = utf-8
indent_size = 2
tab_width = 2

# 改行設定
end_of_line = crlf

# XML config files
[*.{xml,props,targets,ruleset,nuspec,resx,vsixmanifest,vsct}]
charset = utf-8
indent_size = 2
tab_width = 2

# ====================
# JSON
# ====================
[*.json]
#--------------------#
# エンコーディング
charset = utf-8

# 改行設定
end_of_line = lf

# インデントと間隔
indent_size = 4
tab_width = 4

# ====================
# Shell script
# ====================
[*.sh]
#--------------------#
# エンコーディング
charset = utf-8

# 改行設定
end_of_line = lf

# インデントと間隔
indent_size = 4
tab_width = 4

# ====================
# Powershell
# ====================
[*.{ps1,psm1}]
#--------------------#
# エンコーディング
charset = utf-8

# 改行設定
end_of_line = crlf

# インデントと間隔
indent_size = 4
tab_width = 4

# ====================
# Windows Batch
# ====================
[*.{cmd,bat}]
#--------------------#
# 改行設定
end_of_line = crlf

# インデントと間隔
indent_size = 4
tab_width = 4

# ====================
# Markdown
# ====================
[*.md]
#--------------------#
# 改行設定
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = false

####################################
# .NET Coding Conventions
# （.NET 書式設定オプション）
####################################
[*.{cs,vb}]

# using の整理
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# 名前空間設定：名前空間をフォルダー構造に一致させる
dotnet_style_namespace_match_folder = true

# File header
file_header_template = unset

# this. と Me. 修飾子の設定（IDE0003 と IDE0009）：メンバーの前に this. や Me. は付けない。
dotnet_style_qualification_for_event = false:warning
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_property = false:warning

# 言語キーワードと BCL の種類の設定（IDE0049）：フレームワーク型名ではなく、言語キーワードを使用する。
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# かっこの基本設定（IDE0047 および IDE0048）
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent

# アクセス修飾子の指定（IDE0040）：パブリック インターフェイス メンバーの場合を除き、アクセシビリティ修飾子を宣言します。
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent

# 修飾子を順序付け（IDE0036）
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
visual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:suggestion

# フィールド設定（IDE0044）：読み取り専用修飾子の追加
dotnet_style_readonly_field = true:warning

# 三項演算子検査ではなく null 結合式を使用する（IDE0029 および IDE0030）
dotnet_style_coalesce_expression = true:suggestion

# 可能であれば、null 条件演算子を使用する（IDE0031）
dotnet_style_null_propagation = true:suggestion

# 参照の等価性メソッドよりも null 検査を優先する（IDE0041）
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion

# コレクション初期化子を使用する（IDE0028）
dotnet_style_collection_initializer = true:suggestion

# オブジェクト初期化子を使用する（IDE0017）
dotnet_style_object_initializer = true:suggestion

# 明示的に提供されたタプル名を使用する（IDE0033）
dotnet_style_explicit_tuple_names = true:suggestion

# 自動プロパティを優先使用する（IDE0032）
dotnet_style_prefer_auto_properties = true:suggestion

# 複合代入を優先使用する（IDE0054 および IDE0074)）
dotnet_style_prefer_compound_assignment = true:suggestion

# 三項条件よりも if-else ステートメントを優先使用する（IDE0045 および IDE0046）
dotnet_style_prefer_conditional_expression_over_assignment = false:silent
dotnet_style_prefer_conditional_expression_over_return = false:silent

# 推論された匿名型のメンバー名を優先（IDE0037）
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion

# 推論されたタプル要素名を優先（IDE0037）
dotnet_style_prefer_inferred_tuple_names = true:suggestion

# 条件式を簡略化する（IDE0075）
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion

# 補間文字列を簡略化する（IDE0071）
dotnet_style_prefer_simplified_interpolation = true:suggestion

# パラメーターの設定（IDE0060）：使用されていないパラメーターを削除する
dotnet_code_quality_unused_parameters = all:suggestion

# 抑制の設定（IDE0079）：不要な抑制を削除する
dotnet_remove_unnecessary_suppression_exclusions = none

# 改行設定
dotnet_style_allow_multiple_blank_lines_experimental = true
dotnet_style_allow_statement_immediately_after_block_experimental = true

dotnet_style_operator_placement_when_wrapping = beginning_of_line

####################################
# C# Coding Conventions
# （C# 書式設定オプション）
####################################

# var の設定（IDE0007 および IDE0008）：var を優先
csharp_style_var_elsewhere = true:suggestion
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion

# コンストラクターに式本体を使用する（IDE0021）：行わない
csharp_style_expression_bodied_constructors = false:silent

# メソッドに式本体を使用する（IDE0022）：行わない
csharp_style_expression_bodied_methods = false:silent

# 演算子に式本体を使用する（IDE0023 および IDE0024）：行わない
csharp_style_expression_bodied_operators = false:silent

# プロパティに式本体を使用する (IDE0025)：単一行になる場合
csharp_style_expression_bodied_properties = when_on_single_line:silent

# インデクサーに式本体を使用する（IDE0026）：単一行になる場合
csharp_style_expression_bodied_indexers = when_on_single_line:silent

# アクセサーに式本体を使用する（IDE0027）：単一行になる場合
csharp_style_expression_bodied_accessors = when_on_single_line:silent

# ラムダに式本体を使用する（IDE0053）：単一行になる場合
csharp_style_expression_bodied_lambdas = when_on_single_line:silent

# ローカル関数に式本体を使用する（IDE0061）：行わない
csharp_style_expression_bodied_local_functions = false:silent

# パターン マッチング設定
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_prefer_switch_expression = false:suggestion

# 条件付き合体演算子 (?.) を使用する（IDE1005）
csharp_style_conditional_delegate_call = true:suggestion

# throw ステートメントの代わりに throw 式を使用する（IDE0016）
csharp_style_throw_expression = true:suggestion

# ローカル関数を静的にする（IDE0062）：ローカル関数を static とマークする
csharp_prefer_static_local_function = true:suggestion

# コードが 1 行であっても中かっこを使用する（IDE0011）
csharp_prefer_braces = true:suggestion

# 単純な 'using' ステートメントを使用する (IDE0063)
csharp_prefer_simple_using_statement = true:suggestion

# default式を簡略化する（IDE0034）：default を default(T) より優先する
csharp_prefer_simple_default_expression = true:suggestion

# 変数宣言を分解する（IDE0042）：タプル使用時、分解された変数宣言を優先する
csharp_style_deconstructed_variable_declaration = true:suggestion

# new 式を簡略化する（IDE0090）
csharp_style_implicit_object_creation_when_type_is_apparent = false

# インライン変数宣言（IDE0018）：可能であれば、メソッド呼び出しの引数リスト内で out 変数をインラインで宣言する
csharp_style_inlined_variable_declaration = true:suggestion

# 匿名関数よりローカル関数を優先する（IDE0039）
csharp_style_pattern_local_over_anonymous_function = true:suggestion

# インデックス演算子を使用する（IDE0056）：コレクションの末尾からのインデックスを計算するときに、^ 演算子を使用する
csharp_style_prefer_index_operator = false:suggestion

# 範囲演算子を使用する（IDE0057）：コレクションの "スライス" を抽出するときに、範囲演算子 .. を使用しない
csharp_style_prefer_range_operator = false:suggestion

# 不要な値の代入を削除する（IDE0059）
csharp_style_unused_value_assignment_preference = discard_variable:suggestion

# 不要な式の値を削除する（IDE0058）
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# using ディレクティブの配置（IDE0065）：using ディレクティブを名前空間の外側に配置する
csharp_using_directive_placement = outside_namespace:warning

# 改行設定
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true
csharp_style_allow_embedded_statements_on_same_line_experimental = true

####################################
# C# Code Style Settings
####################################

# 改行設定
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# インデント設定
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# スペース設定
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# 折り返し設定
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

# ==================================
# C# Naming Conventions
# ==================================

# ====================
# 名前付けルール
# ====================

dotnet_naming_rule.namespace_should_be_pascal_case.severity = error
dotnet_naming_rule.namespace_should_be_pascal_case.symbols = namespace
dotnet_naming_rule.namespace_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.interface_should_be_begins_with_i.severity = error
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = error
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = error
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.const_variables_should_be_pascal_case.severity = error
dotnet_naming_rule.const_variables_should_be_pascal_case.symbols = const_variables
dotnet_naming_rule.const_variables_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.field_private_protected_should_be_begins_with__.severity = error
dotnet_naming_rule.field_private_protected_should_be_begins_with__.symbols = field_private_protected
dotnet_naming_rule.field_private_protected_should_be_begins_with__.style = begins_with__

dotnet_naming_rule.field_public_internal_should_be_pascal_case.severity = error
dotnet_naming_rule.field_public_internal_should_be_pascal_case.symbols = field_public_internal
dotnet_naming_rule.field_public_internal_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.local_function_should_be_pascal_case.severity = error
dotnet_naming_rule.local_function_should_be_pascal_case.symbols = local_function
dotnet_naming_rule.local_function_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.local_variable_should_be_camel_case.severity = error
dotnet_naming_rule.local_variable_should_be_camel_case.symbols = local_variable
dotnet_naming_rule.local_variable_should_be_camel_case.style = camel_case

dotnet_naming_rule.type_parameter_should_be_pascal_case.severity = error
dotnet_naming_rule.type_parameter_should_be_pascal_case.symbols = type_parameter
dotnet_naming_rule.type_parameter_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.parameter_should_be_camel_case.severity = error
dotnet_naming_rule.parameter_should_be_camel_case.symbols = parameter
dotnet_naming_rule.parameter_should_be_camel_case.style = camel_case

# ====================
# 記号の仕様
# ====================

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, delegate, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

dotnet_naming_symbols.namespace.applicable_kinds = namespace
dotnet_naming_symbols.namespace.applicable_accessibilities =
dotnet_naming_symbols.namespace.required_modifiers =

dotnet_naming_symbols.local_function.applicable_kinds = local_function
dotnet_naming_symbols.local_function.applicable_accessibilities =
dotnet_naming_symbols.local_function.required_modifiers =

dotnet_naming_symbols.type_parameter.applicable_kinds = type_parameter
dotnet_naming_symbols.type_parameter.applicable_accessibilities = *
dotnet_naming_symbols.type_parameter.required_modifiers =

dotnet_naming_symbols.local_variable.applicable_kinds = local
dotnet_naming_symbols.local_variable.applicable_accessibilities = *
dotnet_naming_symbols.local_variable.required_modifiers =

dotnet_naming_symbols.parameter.applicable_kinds = parameter
dotnet_naming_symbols.parameter.applicable_accessibilities = *
dotnet_naming_symbols.parameter.required_modifiers =

dotnet_naming_symbols.field_private_protected.applicable_kinds = field
dotnet_naming_symbols.field_private_protected.applicable_accessibilities = private, protected, private_protected
dotnet_naming_symbols.field_private_protected.required_modifiers =

dotnet_naming_symbols.field_public_internal.applicable_kinds = field
dotnet_naming_symbols.field_public_internal.applicable_accessibilities = public, internal, protected_internal
dotnet_naming_symbols.field_public_internal.required_modifiers =

dotnet_naming_symbols.const_variables.applicable_kinds = field
dotnet_naming_symbols.const_variables.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.const_variables.required_modifiers = const

# ====================
# 命名スタイル
# ====================

dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.camel_case.required_prefix =
dotnet_naming_style.camel_case.required_suffix =
dotnet_naming_style.camel_case.word_separator =
dotnet_naming_style.camel_case.capitalization = camel_case

dotnet_naming_style.begins_with_p.required_prefix = p
dotnet_naming_style.begins_with_p.required_suffix =
dotnet_naming_style.begins_with_p.word_separator =
dotnet_naming_style.begins_with_p.capitalization = camel_case

dotnet_naming_style.begins_with__.required_prefix = _
dotnet_naming_style.begins_with__.required_suffix =
dotnet_naming_style.begins_with__.word_separator =
dotnet_naming_style.begins_with__.capitalization = camel_case
